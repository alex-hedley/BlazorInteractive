@using BlazorInteractive.Components.Editor
@using BlazorInteractive.Components.Output

@page "/"

@inject ICompiler CodeCompiler
@inject IAssemblyInvoker AssemblyInvoker
@inject IReferenceFilter ReferenceFilter

<PageTitle>Index</PageTitle>

<div class="container">
    <div class="row">
        <div class="col">
            <EditorComponent OnCompile="OnCompileAsync" References="References"></EditorComponent>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col">
            <OutputComponent Content="@output" OutputClass="@outputClass"></OutputComponent>
        </div>
    </div>
</div>

@code {
    private string? output = string.Empty;
    private string? outputClass = string.Empty;
    private List<string> References = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var referencesResult = await ReferenceFilter.GetReferencesAsync(CancellationToken.None);
        referencesResult.Switch(
            references => {
                References = references.ToList();
            },
            failure => {
                //TODO: Show error toast
            },
            cancelled => {
                //TODO: Do nothing
            }
        );
    }

    private async Task OnCompileAsync(CompilationArgs args)
    {
        output = string.Empty;

        const string sourceCodeFormat = @"
        using System;

        namespace BlazorInteractive
        {{
            public class Program
            {{
                public static void Main()
                {{
                    {0}
                }}
            }}
        }}
        ";

        var sourceCode = string.Format(sourceCodeFormat, args.SourceCode);

        await Task.Run(async () => {
            var compilationResult = await CodeCompiler.CompileAsync(sourceCode, args.References, args.CancellationToken);

            output = compilationResult.Match(
                assembly => {
                    outputClass = "success";
                    return AssemblyInvoker.Invoke(assembly, "BlazorInteractive.Program", "Main");
                },
                @void => {
                    outputClass = "";
                    return string.Empty;
                },
                failure => {
                    outputClass = "error";
                    return failure.Exception?.Message;
                },
                cancelled => {
                    outputClass = "warning";
                    return string.Empty;
                }
            );
        }, args.CancellationToken);
    }
}