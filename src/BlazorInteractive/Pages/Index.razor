@using System.Reflection;

@using BlazorInteractive.Components.Editor
@using BlazorInteractive.Components.Output

@page "/"

@inject ICompiler CodeCompiler
@inject IAssemblyInvoker AssemblyInvoker

<PageTitle>Index</PageTitle>

<div class="container">
    <div class="row">
        <div class="col">
            <EditorComponent OnCompile="OnCompileAsync"></EditorComponent>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col">
            <OutputComponent Content="@output" OutputClass="@outputClass"></OutputComponent>
        </div>
    </div>
</div>

@code {
    private string output = string.Empty;
    private string outputClass = string.Empty;

    private async Task OnCompileAsync(string editorText)
    {
        const string sourceCodeFormat = @"
        using System;

        namespace BlazorInteractive
        {{
            public class Program
            {{
                public string Main()
                {{
                    {0}
                    return ""Hello, World!"";
                }}
            }}
        }}
        ";

        string sourceCode = string.Format(sourceCodeFormat, editorText);

        var imports = Assembly.GetEntryAssembly()?.GetReferencedAssemblies().Select(o => Assembly.Load(o)).ToList();
        imports.Add(typeof(object).Assembly);
        imports.Add(typeof(Console).Assembly);
        imports.Add(typeof(Enumerable).Assembly);

        var importNames = imports.Select(a => a.GetName().Name!).ToList();
        CompilationResult compilationResult = await CodeCompiler.CompileAsync(sourceCode, importNames);

        //Type type = scriptAssembly.GetType("RoslynCompileSample.Writer");
        //// create an instance
        //object obj = Activator.CreateInstance(type);
        //// call our test function
        //_returnValue = (string)type.InvokeMember("Write", BindingFlags.Default | BindingFlags.InvokeMethod, null, obj, new object[] { "Hello World" });

        // // Grab any Console info.
        // var defaultWriter = Console.Out;
        // using var writer = new StringWriter();
        // Console.SetOut(writer);
        // var result = writer.ToString();
        // Console.SetOut(defaultWriter);

        output = compilationResult.Match(
            assembly => {
                outputClass = "success";
                return AssemblyInvoker.Invoke(assembly, "BlazorInteractive.Program", "Main");
            },
            @void => {
                outputClass = "";
                return string.Empty;
            },
            failure => {
                outputClass = "error";
                return failure.Exception.Message;
            },
            cancelled => {
                outputClass = "warning";
                return string.Empty;
            }
        );
    }
}