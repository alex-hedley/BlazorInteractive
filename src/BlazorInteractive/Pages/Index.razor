@using BlazorInteractive.Components.Editor
@using BlazorInteractive.Components.Output

@page "/"

@inject IToastService ToastService
@inject ICompiler CodeCompiler
@inject IAssemblyInvoker AssemblyInvoker
@inject IReferenceFilter ReferenceFilter

<PageTitle>Index</PageTitle>

<div class="container">
    <EditorComponent OnCompileChanged="OnCompileAsync" References="References" @ref="_editor"></EditorComponent>
    <br />
    <div class="row">
        <div class="col col-9">
            <OutputComponent Content="@output" OutputClass="@outputClass"></OutputComponent>
        </div>
        <div class="col col-3">
            <Stats />
        </div>
    </div>
</div>

@code {
    private EditorComponent _editor = null!;
    private string? output = string.Empty;
    private string? outputClass = string.Empty;
    private List<string> References = new List<string>();

    protected async override Task OnInitializedAsync()
    {
        var referencesResult = await ReferenceFilter.GetReferencesAsync(CancellationToken.None);
        referencesResult.Switch(
            references => {
                References = references.ToList();
            },
            failure => {
                ToastService.ShowError(failure.errorMessage);
            },
            cancelled => {
                ToastService.ShowInfo("Cancelled");
            }
        );
    }

    private async Task OnCompileAsync(CompilationArgs args)
    {
        output = string.Empty;
        string sourceCodeFormat = @"";
        
        switch (_editor.Language)
        {
            case "csharp":
                sourceCodeFormat = @"
                    namespace BlazorInteractive
                    {{
                        public class Program
                        {{
                            public static void Main()
                            {{
                                {0}
                            }}
                        }}
                    }}
                    ";
                break;
            case "vb":
                sourceCodeFormat = @"
                    Public Module BlazorInteractive
                        Public Sub Main()
                            {0}
                        End Sub
                    End Module
                    ";
                break;
            case "fsharp":
                sourceCodeFormat = @"";
                break;
            // default:
            //     break;
        }
        
        var sourceCode = string.Format(sourceCodeFormat, args.SourceCode);

        await Task.Run(async () => {
            var compilationResult = await CodeCompiler.CompileAsync(sourceCode, args.References, _editor.Language!, args.LanguageVersion, args.CancellationToken);

            output = compilationResult.Match(
                assembly => {
                    outputClass = "success";
                    var output = AssemblyInvoker.Invoke(assembly, "BlazorInteractive.Program", "Main");
                    return output;
                },
                @void => {
                    outputClass = "";
                    return string.Empty;
                },
                failure => {
                    outputClass = "error";
                    return failure.errorMessage;
                },
                cancelled => {
                    outputClass = "warning";
                    return string.Empty;
                }
            );
        }, args.CancellationToken);
    }
}