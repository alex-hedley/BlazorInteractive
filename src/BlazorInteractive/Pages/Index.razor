@using System.Reflection;

@using BlazorInteractive.Components.Editor
@using BlazorInteractive.Components.Output

@page "/"

@inject ICompiler CodeCompiler
@inject IAssemblyInvoker AssemblyInvoker

<PageTitle>Index</PageTitle>

<div class="container">
    <div class="row">
        <div class="col">
            <EditorComponent OnCompile="OnCompileAsync" References="References"></EditorComponent>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col">
            <OutputComponent Content="@output" OutputClass="@outputClass"></OutputComponent>
        </div>
    </div>
</div>

@code {
    private string? output = string.Empty;
    private string? outputClass = string.Empty;
    private List<string> References = new List<string>();

    protected override void OnInitialized()
    {
        var imports = Assembly.GetEntryAssembly()?.GetReferencedAssemblies().Select(Assembly.Load).ToList();
        imports?.Add(typeof(object).Assembly);
        imports?.Add(typeof(Console).Assembly);
        imports?.Add(typeof(Enumerable).Assembly);
        
        References = imports?
                        .Select(a => a.GetName().Name!)
                        .Distinct()
                        .OrderBy(a => a)
                        .ToList();
    }
    
    private async Task OnCompileAsync(CompilationArgs args)
    {
        output = string.Empty;
        
        const string sourceCodeFormat = @"
        using System;

        namespace BlazorInteractive
        {{
            public class Program
            {{
                public static void Main()
                {{
                    {0}
                }}
            }}
        }}
        ";

        var sourceCode = string.Format(sourceCodeFormat, args.SourceCode);
        
        await Task.Run(async () => {
            var compilationResult = await CodeCompiler.CompileAsync(sourceCode, args.References, args.CancellationToken);
        
            output = compilationResult.Match(
                assembly => {
                    outputClass = "success";
                    return AssemblyInvoker.Invoke(assembly, "BlazorInteractive.Program", "Main");
                },
                @void => {
                    outputClass = "";
                    return string.Empty;
                },
                failure => {
                    outputClass = "error";
                    return failure.Exception?.Message;
                },
                cancelled => {
                    outputClass = "warning";
                    return string.Empty;
                }
            );
        }, args.CancellationToken);
    }
}