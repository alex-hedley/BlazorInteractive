@typeparam TItem

<div class="card">
    <div class="card-header">
        <button class="btn btn-outline-dark" @onclick="ToggleChecklist">
            Namespaces: @SelectedValues.Count/@Data.Count() selected
        </button>
    </div>
    <div class="card-body" style=@_cardStyle>
        <div class="checkboxlist" style=@Style>

            <div class="input-group mb-3">
                @* <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">Search Term</span>
                </div> *@
                <input type="text" class="form-control" placeholder="Search Term" aria-label="Search Term" @bind="SearchTerm" @bind:event="oninput" />
            </div>

            @if (Data != null)
            {
                foreach (var item in Data.Where(i => i is not null))
                {

                    var text = TextField?.Invoke(item);
                    var value = ValueField?.Invoke(item).ToString();
                    var isChecked = SelectedValues.Contains(value!);
                    var isDisabled = DisabledValues.Contains(value!);

                    if (!string.IsNullOrEmpty(SearchTerm) && !value.ToLower().Contains(SearchTerm.ToLower())) continue;

                    <div class="form-check">
                        <input
                            class="form-check-input"
                            type="checkbox"
                            id="@($"{text}Checkbox")"
                            checked=@isChecked
                            disabled=@isDisabled
                            @onchange="eventArgs => { CheckboxClicked(value, eventArgs.Value); }"
                            value="@value"
                            />
                        
                        <label class="form-check-label" for="@($"{text}Checkbox")">
                            @($" {text}")
                        </label>
                    </div>
                }
            }
            @ChildContent
        </div>
    </div>
</div>


<br />

@* <div id="selectedItems">
    <p><strong>Selected Namespaces:</strong> (<em>#: @SelectedValues.Count()</em>)</p>
    <ul>
    @foreach (var item in SelectedValues.ToList().OrderBy(x => x))
    {
        <li>@item</li>
    }
    </ul>
</div> *@

@code {
    private bool _showChecklist { get; set; } = true;
    private string _cardStyle { get; set; } = string.Empty;

    private void ToggleChecklist()
    {
        _showChecklist = !_showChecklist;
        _cardStyle = _showChecklist ? string.Empty : "display: none;";
    }

    // How To Create A Checkbox List In Blazor - S.Ravi Kumar - Jul 17, 2020
    // https://www.c-sharpcorner.com/article/how-to-create-a-checkbox-list-in-blazor/
    [Parameter]
    public IEnumerable<TItem> Data { get; set; }

    [Parameter]
    public Func<TItem, string> TextField { get; set; }

    [Parameter]
    public Func<TItem, object> ValueField { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public List<string> SelectedValues { get; set; }

    [Parameter]
    public List<string> DisabledValues { get; set; }

    //[Parameter]
    public string? SearchTerm { get; set; }

    public void CheckboxClicked(string aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }

    public void SelectAll()
    {
        SelectedValues = Data.Where(i => i is not null).Select(i => ValueField?.Invoke(i).ToString()).ToList();
    }
}