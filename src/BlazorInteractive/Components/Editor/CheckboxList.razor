@typeparam TItem
<div class="checkboxlist" style=@Style>
    <p id="title">Namespaces:</p>
    @if (Data != null)
    {
        foreach (var item in Data.Where(i => i is not null))
        {
            var text = TextField?.Invoke(item);
            var value = ValueField?.Invoke(item).ToString();
            var isChecked = SelectedValues.Contains(value!);
            var isDisabled = DisabledValues.Contains(value!);
            
            <div class="form-check">
                <input
                    class="form-check-input"
                    type="checkbox"
                    id="@($"{text}Checkbox")"
                    checked=@isChecked
                    disabled=@isDisabled
                    @onchange="eventArgs => { CheckboxClicked(value, eventArgs.Value); }"
                    value="@value"
                    />
                
                <label class="form-check-label" for="@($"{text}Checkbox")">
                    @($" {text}")
                </label>
            </div>
        }
    }
    @ChildContent
</div>

@code {
    // How To Create A Checkbox List In Blazor - S.Ravi Kumar - Jul 17, 2020
    // https://www.c-sharpcorner.com/article/how-to-create-a-checkbox-list-in-blazor/
    [Parameter]
    public IEnumerable<TItem> Data { get; set; }

    [Parameter]
    public Func<TItem, string> TextField { get; set; }

    [Parameter]
    public Func<TItem, object> ValueField { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public List<string> SelectedValues { get; set; }

    [Parameter]
    public List<string> DisabledValues { get; set; }

    public void CheckboxClicked(string aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }
}