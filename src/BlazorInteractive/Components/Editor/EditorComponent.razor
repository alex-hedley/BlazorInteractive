@* @inject CompilerService cs *@

<div class="row">
    <div class="col">
        <div style="margin:10px 0;">
            Theme:
            <select id="theme" @onchange="ChangeTheme">
                <option value="vs">Visual Studio</option>
                <option value="vs-dark">Visual Studio Dark</option>
                <option value="hc-black">High Contrast Black</option>
            </select>
        </div>
    </div>
</div>
<div class="row">
    <div class="col">
        <h1>Code Compiler</h1>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <CheckboxList Data="@(SortedReferencesWithoutExtension())"
                      TextField="@((item) => item.referenceNoExt)"
                      ValueField="@((item) => item.reference)"
                      SelectedValues="@SelectedIds"
                      DisabledValues="@DisabledIds"
                      Style="@Style"
                      />
    </div>
    <div class="col-md-8">
        <StandaloneCodeEditor
            Id="editor"
            ConstructionOptions="EditorConstructionOptions"
            CssClass="editor"
            @ref="_editor" />
    </div>
</div>
<div class="row">
    <div class="col">
    </div>
    <div class="col">
        <button @onclick="Compile" class="btn btn-info" disabled="@CanCancel">Compile</button>
        <button @onclick="Cancel" class="btn btn-info" disabled="@(!CanCancel)">Cancel</button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<CompilationArgs> OnCompile { get; set; }

    [Parameter]
    public List<string> References { get; set; }

    private List<string> SelectedIds = new();
    private List<string> DisabledIds = new();
    private StandaloneCodeEditor _editor = null!;
    private CancellationTokenSource? _cts;
    private bool CanCancel = false;
    private string Style = string.Empty;

    protected override void OnInitialized()
    {
        var required = new List<string>() { "System.dll", "System.Console.dll", "System.Private.CoreLib.dll", "System.Runtime.dll" }; 
        DisabledIds = required;
        SelectedIds = required;

        // Style = "height: 500px; overflow:scroll;";
    }

    private List<(string reference, string referenceNoExt)> SortedReferencesWithoutExtension()
    {
        return References.Select(r => new  { reference = r, referenceNoExt = r.TrimEnd(".dll") })
            .Select(c => (Reference: c.reference, ReferenceNoExt: c.referenceNoExt)) 
            .OrderBy(a => a.Reference)
            .ToList();
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Value = "Console.WriteLine(\"Hello, World!\");"
        };
    }

    private async Task Compile()
    {
        _cts = new CancellationTokenSource();
        string value = await _editor.GetValue();
        var args = new CompilationArgs() { SourceCode = value, CancellationToken = _cts.Token, References = SelectedIds };
        try
        {
            CanCancel = true;
            await OnCompile.InvokeAsync(args);
            StateHasChanged();
        }
        finally
        {
            CanCancel = false;
        }
        _cts = null;
    }

    private void Cancel()
    {
        CanCancel = false;
        _cts?.Cancel();
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        Console.WriteLine($"setting theme to: {e.Value?.ToString()}");
        await Global.SetTheme(e.Value?.ToString());
    }
}