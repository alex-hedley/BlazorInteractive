<div class="row">
    <div class="col">
        <h1>Code Compiler</h1>
    </div>
</div>
<div class="row">
    <div class="col">
        <label class="form-label" for="Language">Language:</label>
        <select id="Language" name="Language"  class="form-control" data-val="true" data-val-required="The Language field is required." @bind="Language" disabled>
            <option value="csharp">C#</option>
            <option value="vb">VB.NET</option>
            <option value="fsharp">F#</option>
        </select>
    </div>
    <div class="col">
        <label class="form-label" for="Compiler">Compiler:</label>
        <select id="Compiler" name="Compiler" class="form-control" data-val="true" data-val-required="The Compiler field is required." @bind="Compiler" disabled>
            <option value="Net45">.NET 4.7.2</option>
            <option value="Roslyn">Roslyn 4.4</option>
            <option value="NetLatest">Latest (.NET 7)</option>
            <option value="NetCore31">.NET Core 3.1</option>
            <option value="Net5">.NET 5</option>
            <option value="Net6">.NET 6</option>
            <option value="Net7">.NET 7</option>
            <option value="Net8">.NET 8 Preview 3</option>
        </select>
    </div>
    <div class="col">
        <label class="form-label" for="theme">Theme:</label>
        <select id="theme" @onchange="ChangeTheme" class="form-control">
            <option value="vs">Visual Studio</option>
            <option value="vs-dark">Visual Studio Dark</option>
            <option value="hc-black">High Contrast Black</option>
        </select>
    </div>
    <div class="col">
        <Samples OnSampleChanged="@SampleChanged" />
    </div>
</div>
<br />
<div class="row">
    <div class="col-md-4">
        <CheckboxList Data="@(SortedReferencesWithoutExtension())"
                      TextField="@((item) => item.referenceNoExt)"
                      ValueField="@((item) => item.reference)"
                      SelectedValues="@SelectedIds"
                      DisabledValues="@DisabledIds"
                      Style="@Style"
                      />
    </div>
    <div class="col-md-8">
        <StandaloneCodeEditor
            Id="editor"
            ConstructionOptions="EditorConstructionOptions"
            CssClass="editor"
            @ref="_editor" />
    </div>
</div>
<div class="row">
    <div class="col">
    </div>
    <div class="col">
        <button @onclick="Compile" class="btn btn-info" disabled="@CanCancel">Compile</button>
        <button @onclick="Cancel" class="btn btn-secondary" disabled="@(!CanCancel)">Cancel</button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<CompilationArgs> OnCompileChanged { get; set; }

    [Parameter]
    public List<string> References { get; set; } = new();
    
    [Parameter]
    public string Language { get; set; }

    [Parameter]
    public string Compiler { get; set; }

    private readonly List<string> Required = new() { "System.dll", "System.Console.dll", "System.Private.CoreLib.dll", "System.Runtime.dll" }; 
    private List<string> SelectedIds = new();
    private List<string> DisabledIds = new();
    private StandaloneCodeEditor _editor = null!;
    private CancellationTokenSource? _cts;
    private bool CanCancel = false;
    private string Style = string.Empty;

    protected override void OnInitialized()
    {
        // https://raw.githubusercontent.com/dotnet/roslyn/main/src/Compilers/Core/Portable/Compilation/ParseOptions.cs
        // https://raw.githubusercontent.com/dotnet/roslyn/main/src/Compilers/Core/Portable/Symbols/LanguageNames.cs
        // https://raw.githubusercontent.com/microsoft/monaco-editor/main/src/basic-languages/monaco.contribution.ts
        Language = "csharp";

        // Microsoft.CodeAnalysis.CSharp.LanguageVersion.Default
        Compiler = "NetLatest";
        
        DisabledIds = Required;
        SelectedIds = new List<string>(Required);
    }

    private List<(string reference, string referenceNoExt)> SortedReferencesWithoutExtension()
    {
        return References.Select(r => new  { reference = r, referenceNoExt = r.TrimEnd(".dll") })
            .Select(c => (Reference: c.reference, ReferenceNoExt: c.referenceNoExt)) 
            .OrderBy(a => a.ReferenceNoExt)
            .ToList();
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Value = "Console.WriteLine(\"Hello, World!\");"
        };
    }

    private async Task Compile()
    {
        _cts = new CancellationTokenSource();
        string value = await _editor.GetValue();
        var args = new CompilationArgs() { SourceCode = value, CancellationToken = _cts.Token, References = SelectedIds };
        try
        {
            CanCancel = true;
            await OnCompileChanged.InvokeAsync(args);
            StateHasChanged();
        }
        finally
        {
            CanCancel = false;
        }
        _cts = null;
    }

    private void Cancel()
    {
        CanCancel = false;
        _cts?.Cancel();
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        Console.WriteLine($"setting theme to: {e.Value?.ToString()}");
        await Global.SetTheme(e.Value?.ToString());
    }

    private void SampleChanged(SampleArgs sample)
    {
        _editor.SetValue(sample.SourceCode);
        SelectedIds = Required.Union(sample.AdditionalNamespaces).ToList();
    }
}