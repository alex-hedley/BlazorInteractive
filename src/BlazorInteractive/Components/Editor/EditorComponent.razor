@using Microsoft.CodeAnalysis.CSharp;
@using Microsoft.CodeAnalysis.VisualBasic;

<div class="row">
    <div class="col">
        <h1>Code Compiler</h1>
    </div>
</div>
<div class="row">
    <div class="col">
        <LanguageComponent OnLanguageChanged="@LanguageChanged" />
    </div>
    <div class="col">
        <CompilerVersion Language="@Language" OnCompilerChanged="@CompilerChanged" />
    </div>
    <div class="col">
        <Theme OnThemeChanged="@ThemeChanged" />
    </div>
    <div class="col">
        <SampleComponent Language="@Language" OnSampleChanged="@SampleChanged" />
    </div>
</div>
<br />
<div class="row">
    <div class="col-md-4">
        <CheckboxList Data="@(SortedReferencesWithoutExtension())"
                      TextField="@((item) => item.referenceNoExt)"
                      ValueField="@((item) => item.reference)"
                      SelectedValues="@SelectedIds"
                      DisabledValues="@DisabledIds"
                      Style="@Style"
                      />
    </div>
    <div class="col-md-8">
        <StandaloneCodeEditor
            Id="editor"
            ConstructionOptions="EditorConstructionOptions"
            CssClass="editor"
            @ref="_editor" />
    </div>
</div>
<div class="row">
    <div class="col">
    </div>
    <div class="col">
        <button @onclick="Compile" class="btn btn-info" disabled="@CanCancel">Compile</button>
        <button @onclick="Cancel" class="btn btn-secondary" disabled="@(!CanCancel)">Cancel</button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<CompilationArgs> OnCompileChanged { get; set; }

    [Parameter]
    public List<string> References { get; set; } = new();

    [Parameter]
    public string? Language { get; set; } = "csharp";

    [Parameter]
    public long CompilerVersion { get; set; }

    private readonly List<string> Required = new() { "System.dll", "System.Console.dll", "System.Private.CoreLib.dll", "System.Runtime.dll" }; 
    private List<string> SelectedIds = new();
    private List<string> DisabledIds = new();
    private StandaloneCodeEditor _editor = null!;
    private CancellationTokenSource? _cts;
    private bool CanCancel = false;
    private string Style = string.Empty;

    protected override void OnInitialized()
    {
        // https://raw.githubusercontent.com/dotnet/roslyn/main/src/Compilers/Core/Portable/Compilation/ParseOptions.cs
        // https://raw.githubusercontent.com/dotnet/roslyn/main/src/Compilers/Core/Portable/Symbols/LanguageNames.cs
        // https://raw.githubusercontent.com/microsoft/monaco-editor/main/src/basic-languages/monaco.contribution.ts
        // Language = "csharp";
        switch (Language)
        {
            case "csharp":
                CompilerVersion = (long) Microsoft.CodeAnalysis.CSharp.LanguageVersion.Default;
                break;
            case "vb":
                CompilerVersion = (long) Microsoft.CodeAnalysis.VisualBasic.LanguageVersion.Default;
                break;
            case "fsharp":
                CompilerVersion = 0;
                break;
            default:
                CompilerVersion = (long) Microsoft.CodeAnalysis.CSharp.LanguageVersion.Default;
                break;
        }
        
        DisabledIds = Required;
        SelectedIds = new List<string>(Required);
    }

    private List<(string reference, string referenceNoExt)> SortedReferencesWithoutExtension()
    {
        return References.Select(r => new  { reference = r, referenceNoExt = r.TrimEnd(".dll") })
            .Select(c => (Reference: c.reference, ReferenceNoExt: c.referenceNoExt))
            .OrderBy(a => a.ReferenceNoExt)
            .ToList();
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = Language,
            Value = "Console.WriteLine(\"Hello, World!\");"
        };
    }

    private async Task Compile()
    {
        _cts = new CancellationTokenSource();
        string value = await _editor.GetValue();
        var args = new CompilationArgs()
        {
            SourceCode = value,
            CancellationToken = _cts.Token,
            References = SelectedIds,
            LanguageVersion = CompilerVersion
        };
        try
        {
            CanCancel = true;
            await OnCompileChanged.InvokeAsync(args);
            StateHasChanged();
        }
        finally
        {
            CanCancel = false;
        }
        _cts = null;
    }

    private void Cancel()
    {
        CanCancel = false;
        _cts?.Cancel();
    }

    private async Task ThemeChanged(string theme)
    {
        // private async Task ChangeTheme(ChangeEventArgs e)
        //Console.WriteLine($"setting theme to: {e.Value?.ToString()}");
        //await Global.SetTheme(e.Value?.ToString());
        await Global.SetTheme(theme);
    }

    private void SampleChanged(SampleArgs sample)
    {
        _editor.SetValue(sample.SourceCode);
        SelectedIds = Required.Union(sample.AdditionalNamespaces).ToList();
    }

    private void CompilerChanged(CompilerVersionArgs compiler)
    {
        CompilerVersion = compiler.LanguageVersion;
    }

    private void LanguageChanged(string language)
    {
        Language = language;
    }
}