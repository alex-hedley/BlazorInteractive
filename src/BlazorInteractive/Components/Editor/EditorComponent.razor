@* @inject CompilerService cs *@

<div class="container">
    <div class="row">
        <div class="col">
            <div style="margin:10px 0;">
                Theme:
                <select id="theme" @onchange="ChangeTheme">
                    <option value="vs">Visual Studio</option>
                    <option value="vs-dark">Visual Studio Dark</option>
                    <option value="hc-black">High Contrast Black</option>
                </select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <StandaloneCodeEditor
                Id="editor"
                ConstructionOptions="EditorConstructionOptions"
                CssClass="editor"
                @ref="_editor" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button @onclick="Compile">Compile</button>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<string> OnCompile { get; set; }

    private StandaloneCodeEditor _editor = null!;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Value = "Console.WriteLine(\"Hello, World!\");"
        };
    }

    private async Task Compile()
    {
        string value = await _editor.GetValue();
        //await cs.Run(value);
        await OnCompile.InvokeAsync(value);
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        Console.WriteLine($"setting theme to: {e.Value?.ToString()}");
        await Global.SetTheme(e.Value?.ToString());
    }
}